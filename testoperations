# provider.tf
provider "aws" {
  region = var.aws_region
}

# variables.tf
variable "aws_region" {}
variable "table_name" {}
variable "billing_mode" {}
variable "read_capacity" {}
variable "write_capacity" {}
variable "hash_key" {}
variable "range_key" {}
variable "attributes" {
  type = list(object({
    name = string
    type = string
  }))
}
variable "local_secondary_indexes" {
  type = list(object({
    name               = string
    range_key         = string
    projection_type   = string
    non_key_attributes = list(string)
  }))
}
variable "global_secondary_indexes" {
  type = list(object({
    name               = string
    hash_key          = string
    range_key         = string
    projection_type   = string
    non_key_attributes = list(string)
    read_capacity     = number
    write_capacity    = number
  }))
}
variable "autoscaling_target_utilization" {}

# main.tf
resource "aws_dynamodb_table" "dynamodb_table" {
  name           = var.table_name
  billing_mode   = var.billing_mode
  read_capacity  = var.read_capacity
  write_capacity = var.write_capacity
  hash_key       = var.hash_key
  range_key      = var.range_key

  dynamic "attribute" {
    for_each = var.attributes
    content {
      name = attribute.value.name
      type = attribute.value.type
    }
  }
  
  dynamic "local_secondary_index" {
    for_each = var.local_secondary_indexes
    content {
      name               = local_secondary_index.value.name
      range_key          = local_secondary_index.value.range_key
      projection_type    = local_secondary_index.value.projection_type
      non_key_attributes = local_secondary_index.value.non_key_attributes
    }
  }
  
  dynamic "global_secondary_index" {
    for_each = var.global_secondary_indexes
    content {
      name               = global_secondary_index.value.name
      hash_key          = global_secondary_index.value.hash_key
      range_key         = global_secondary_index.value.range_key
      projection_type   = global_secondary_index.value.projection_type
      non_key_attributes = global_secondary_index.value.non_key_attributes
      read_capacity     = global_secondary_index.value.read_capacity
      write_capacity    = global_secondary_index.value.write_capacity
    }
  }
}

resource "aws_appautoscaling_target" "read_target" {
  max_capacity       = 10
  min_capacity       = 1
  resource_id        = "table/${aws_dynamodb_table.dynamodb_table.name}"
  scalable_dimension = "dynamodb:table:ReadCapacityUnits"
  service_namespace  = "dynamodb"
}

resource "aws_appautoscaling_policy" "read_policy" {
  name               = "DynamoDBReadAutoScalingPolicy"
  policy_type        = "TargetTrackingScaling"
  resource_id        = aws_appautoscaling_target.read_target.resource_id
  scalable_dimension = aws_appautoscaling_target.read_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.read_target.service_namespace

  target_tracking_scaling_policy_configuration {
    target_value       = var.autoscaling_target_utilization
    predefined_metric_specification {
      predefined_metric_type = "DynamoDBReadCapacityUtilization"
    }
  }
}

resource "aws_appautoscaling_target" "write_target" {
  max_capacity       = 10
  min_capacity       = 1
  resource_id        = "table/${aws_dynamodb_table.dynamodb_table.name}"
  scalable_dimension = "dynamodb:table:WriteCapacityUnits"
  service_namespace  = "dynamodb"
}

resource "aws_appautoscaling_policy" "write_policy" {
  name               = "DynamoDBWriteAutoScalingPolicy"
  policy_type        = "TargetTrackingScaling"
  resource_id        = aws_appautoscaling_target.write_target.resource_id
  scalable_dimension = aws_appautoscaling_target.write_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.write_target.service_namespace

  target_tracking_scaling_policy_configuration {
    target_value       = var.autoscaling_target_utilization
    predefined_metric_specification {
      predefined_metric_type = "DynamoDBWriteCapacityUtilization"
    }
  }
}

# output.tf
output "table_name" {
  value = aws_dynamodb_table.dynamodb_table.name
}

# terraform.tfvars
aws_region = "us-east-1"
table_name = "MyDynamoDBTable"
billing_mode = "PROVISIONED"
read_capacity = 1
write_capacity = 1
hash_key = "id"
range_key = "timestamp"
autoscaling_target_utilization = 70
attributes = [
  { name = "id", type = "S" },
  { name = "timestamp", type = "N" }
]
local_secondary_indexes = [
  { name = "lsi1", range_key = "timestamp", projection_type = "ALL", non_key_attributes = [] }
]
global_secondary_indexes = [
  { name = "gsi1", hash_key = "id", range_key = "timestamp", projection_type = "ALL", non_key_attributes = [], read_capacity = 1, write_capacity = 1 }
]

